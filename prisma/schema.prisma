// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // You can change this to another supported database if needed
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}
model Topic {
  id          String          @id @default(uuid())
  name        String          @unique
  icon        String          @default("")
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  modules     ModuleOnTopic[]
}

model Module {
  id          String          @id @default(uuid())
  title       String
  image       String? // URL to the image
  summary     String
  content     String          @db.Text
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdById String
  createdBy   User            @relation("CreatedModules", fields: [createdById], references: [id])
  bookmarks   Bookmark[]
  lastSeen    LastSeen[]
  topics      ModuleOnTopic[]
}

model ModuleOnTopic {
  moduleId   String
  topicId    String
  assignedAt DateTime @default(now())
  // Relations
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  // Composite primary key
  @@id([moduleId, topicId])
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  moduleId  String
  createdAt DateTime @default(now())
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  // Composite unique constraint to prevent duplicate bookmarks
  @@unique([userId, moduleId])
}

model LastSeen {
  id         String   @id @default(uuid())
  userId     String
  moduleId   String
  lastSeenAt DateTime @default(now())
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  // Composite unique constraint to track only one last seen record per user-module pair
  @@unique([userId, moduleId])
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  role          UserRole   @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bookmarks     Bookmark[]
  lastSeen      LastSeen[]
  modules       Module[]   @relation("CreatedModules") // Only for ADMIN users
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}


model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
